{"version":3,"sources":["img/logo.jpg","context/auth.js","PrivateRoute.js","pages/Home.js","components/AuthForms.js","pages/Admin.js","pages/Login.js","pages/Signup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AuthContext","createContext","useAuth","useContext","PrivateRoute","_ref","Component","component","rest","Object","objectWithoutProperties","authTokens","react_default","a","createElement","react_router","assign","render","props","to","pathname","state","referer","location","Home","Card","styled","div","_templateObject","Form","_templateObject2","Input","input","_templateObject3","Button","button","_templateObject4","Logo","img","_templateObject5","Error","_templateObject6","Admin","setAuthTokens","onClick","Login","_useState","useState","_useState2","slicedToArray","isLoggedIn","setLoggedIn","_useState3","_useState4","isError","setIsError","_useState5","_useState6","userName","setUserName","_useState7","_useState8","password","setPassword","src","logoImg","type","value","onChange","e","target","placeholder","axios","post","then","result","status","data","catch","react_router_dom","Signup","App","Provider","localStorage","setItem","JSON","stringify","exact","path","src_PrivateRoute","Boolean","window","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d4e421fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.46aaeee7.jpg\";","import { createContext, useContext } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useAuth } from \"./context/auth\";\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n  const { authTokens } = useAuth();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props =>\r\n        authTokens ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{ pathname: \"/login\", state: { referer: props.location } }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default PrivateRoute;","import React from \"react\";\r\n\r\nfunction Home(props) {\r\n  return <div>Home Page</div>;\r\n}\r\n\r\nexport default Home;","import styled from 'styled-components';\r\n\r\nconst Card = styled.div`\r\n  box-sizing: border-box;\r\n  max-width: 410px;\r\n  margin: 0 auto;\r\n  padding: 0 2rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst Form = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 1rem;\r\n  border: 1px solid #999;\r\n  margin-bottom: 1rem;\r\n  font-size: 0.8rem;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background: linear-gradient(to bottom, #6371c7, #5563c1);\r\n  border-color: #3f4eae;\r\n  border-radius: 3px;\r\n  padding: 1rem;\r\n  color: white;\r\n  font-weight: 700;\r\n  width: 100%;\r\n  margin-bottom: 1rem;\r\n  font-size: 0.8rem;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  width: 50%;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst Error = styled.div`\r\n  background-color: red;\r\n`;\r\n\r\nexport { Form, Input, Button, Logo, Card, Error };","import React from \"react\";\r\nimport { Button } from \"../components/AuthForms\";\r\nimport { useAuth } from \"../context/auth\";\r\n\r\nfunction Admin(props) {\r\n  const { setAuthTokens } = useAuth();\r\n\r\n  function logOut() {\r\n    setAuthTokens();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>Admin Page - webhook test</div>\r\n      <Button onClick={logOut}>Log out</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Admin;","import React, { useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport logoImg from \"../img/logo.jpg\";\r\nimport { Card, Logo, Form, Input, Button, Error } from \"../components/AuthForms\";\r\nimport { useAuth } from \"../context/auth\";\r\n\r\nfunction Login(props) {\r\n  const [isLoggedIn, setLoggedIn] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const { setAuthTokens } = useAuth();\r\n  const referer = props.location.state.referer || '/';\r\n\r\n  function postLogin() {\r\n    axios.post(\"http://localhost:8080/api/auth/signin\", {\r\n      userName,\r\n      password\r\n    }).then(result => {\r\n      if (result.status === 200) {\r\n        setAuthTokens(result.data);\r\n        setLoggedIn(true);\r\n      } else {\r\n        setIsError(true);\r\n      }\r\n    }).catch(e => {\r\n      setIsError(true);\r\n    });\r\n  }\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to={referer} />;\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <Logo src={logoImg} />\r\n      <Form>\r\n        <Input\r\n          type=\"username\"\r\n          value={userName}\r\n          onChange={e => {\r\n            setUserName(e.target.value);\r\n          }}\r\n          placeholder=\"email\"\r\n        />\r\n        <Input\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={e => {\r\n            setPassword(e.target.value);\r\n          }}\r\n          placeholder=\"password\"\r\n        />\r\n        <Button onClick={postLogin}>Sign In</Button>\r\n      </Form>\r\n      <Link to=\"/signup\">Don't have an account?</Link>\r\n        { isError &&<Error>The username or password provided were incorrect!</Error> }\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport logoImg from \"../img/logo.jpg\";\r\nimport { Card, Logo, Form, Input, Button } from '../components/AuthForms';\r\n\r\nfunction Signup() {\r\n  return (\r\n    <Card>\r\n      <Logo src={logoImg} />\r\n      <Form>\r\n        <Input type=\"email\" placeholder=\"email\" />\r\n        <Input type=\"password\" placeholder=\"password\" />\r\n        <Input type=\"password\" placeholder=\"password again\" />\r\n        <Button>Sign Up</Button>\r\n      </Form>\r\n      <Link to=\"/login\">Already have an account?</Link>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n\r\n","import React, { useState } from \"react\";\r\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\r\nimport PrivateRoute from './PrivateRoute';\r\nimport Home from \"./pages/Home\";\r\nimport Admin from \"./pages/Admin\";\r\nimport { AuthContext } from \"./context/auth\";\r\nimport Login from \"./pages/Login\";\r\nimport Signup from './pages/Signup';\r\n\r\nfunction App(props) {\r\n  const [authTokens, setAuthTokens] = useState();\r\n  \r\n  const setTokens = (data) => {\r\n    localStorage.setItem(\"tokens\", JSON.stringify(data));\r\n    setAuthTokens(data);\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ authTokens, setAuthTokens: setTokens }}>\r\n      <Router>\r\n        <div>\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/\">Home Page-wh</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/admin\">Admin Page-wh</Link>\r\n          </li>\r\n        </ul>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/login\" component={Login} />\r\n          <Route path=\"/signup\" component={Signup} />\r\n          <PrivateRoute path=\"/admin\" component={Admin} />\r\n        </div>\r\n      </Router>\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}